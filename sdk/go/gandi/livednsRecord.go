// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gandi

import (
	"context"
	"reflect"

	"errors"
	"github.com/pczora/pulumi-gandi/sdk/go/gandi/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: gandi.index/livednsrecord.LivednsRecord has been deprecated in favor of gandi.livedns/record.Record
type LivednsRecord struct {
	pulumi.CustomResourceState

	// The href of the record
	Href pulumi.StringOutput `pulumi:"href"`
	// Define if the record can be modified outside Terraform (this currently only works for TXT records)
	Mutable pulumi.BoolPtrOutput `pulumi:"mutable"`
	// The name of the record
	Name pulumi.StringOutput `pulumi:"name"`
	// The TTL of the record
	Ttl pulumi.IntOutput `pulumi:"ttl"`
	// The type of the record
	Type pulumi.StringOutput `pulumi:"type"`
	// A list of values of the record
	Values pulumi.StringArrayOutput `pulumi:"values"`
	// The FQDN of the domain
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewLivednsRecord registers a new resource with the given unique name, arguments, and options.
func NewLivednsRecord(ctx *pulumi.Context,
	name string, args *LivednsRecordArgs, opts ...pulumi.ResourceOption) (*LivednsRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ttl == nil {
		return nil, errors.New("invalid value for required argument 'Ttl'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Values == nil {
		return nil, errors.New("invalid value for required argument 'Values'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LivednsRecord
	err := ctx.RegisterResource("gandi:index/livednsRecord:LivednsRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLivednsRecord gets an existing LivednsRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLivednsRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LivednsRecordState, opts ...pulumi.ResourceOption) (*LivednsRecord, error) {
	var resource LivednsRecord
	err := ctx.ReadResource("gandi:index/livednsRecord:LivednsRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LivednsRecord resources.
type livednsRecordState struct {
	// The href of the record
	Href *string `pulumi:"href"`
	// Define if the record can be modified outside Terraform (this currently only works for TXT records)
	Mutable *bool `pulumi:"mutable"`
	// The name of the record
	Name *string `pulumi:"name"`
	// The TTL of the record
	Ttl *int `pulumi:"ttl"`
	// The type of the record
	Type *string `pulumi:"type"`
	// A list of values of the record
	Values []string `pulumi:"values"`
	// The FQDN of the domain
	Zone *string `pulumi:"zone"`
}

type LivednsRecordState struct {
	// The href of the record
	Href pulumi.StringPtrInput
	// Define if the record can be modified outside Terraform (this currently only works for TXT records)
	Mutable pulumi.BoolPtrInput
	// The name of the record
	Name pulumi.StringPtrInput
	// The TTL of the record
	Ttl pulumi.IntPtrInput
	// The type of the record
	Type pulumi.StringPtrInput
	// A list of values of the record
	Values pulumi.StringArrayInput
	// The FQDN of the domain
	Zone pulumi.StringPtrInput
}

func (LivednsRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*livednsRecordState)(nil)).Elem()
}

type livednsRecordArgs struct {
	// Define if the record can be modified outside Terraform (this currently only works for TXT records)
	Mutable *bool `pulumi:"mutable"`
	// The name of the record
	Name *string `pulumi:"name"`
	// The TTL of the record
	Ttl int `pulumi:"ttl"`
	// The type of the record
	Type string `pulumi:"type"`
	// A list of values of the record
	Values []string `pulumi:"values"`
	// The FQDN of the domain
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a LivednsRecord resource.
type LivednsRecordArgs struct {
	// Define if the record can be modified outside Terraform (this currently only works for TXT records)
	Mutable pulumi.BoolPtrInput
	// The name of the record
	Name pulumi.StringPtrInput
	// The TTL of the record
	Ttl pulumi.IntInput
	// The type of the record
	Type pulumi.StringInput
	// A list of values of the record
	Values pulumi.StringArrayInput
	// The FQDN of the domain
	Zone pulumi.StringInput
}

func (LivednsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*livednsRecordArgs)(nil)).Elem()
}

type LivednsRecordInput interface {
	pulumi.Input

	ToLivednsRecordOutput() LivednsRecordOutput
	ToLivednsRecordOutputWithContext(ctx context.Context) LivednsRecordOutput
}

func (*LivednsRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**LivednsRecord)(nil)).Elem()
}

func (i *LivednsRecord) ToLivednsRecordOutput() LivednsRecordOutput {
	return i.ToLivednsRecordOutputWithContext(context.Background())
}

func (i *LivednsRecord) ToLivednsRecordOutputWithContext(ctx context.Context) LivednsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LivednsRecordOutput)
}

// LivednsRecordArrayInput is an input type that accepts LivednsRecordArray and LivednsRecordArrayOutput values.
// You can construct a concrete instance of `LivednsRecordArrayInput` via:
//
//	LivednsRecordArray{ LivednsRecordArgs{...} }
type LivednsRecordArrayInput interface {
	pulumi.Input

	ToLivednsRecordArrayOutput() LivednsRecordArrayOutput
	ToLivednsRecordArrayOutputWithContext(context.Context) LivednsRecordArrayOutput
}

type LivednsRecordArray []LivednsRecordInput

func (LivednsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LivednsRecord)(nil)).Elem()
}

func (i LivednsRecordArray) ToLivednsRecordArrayOutput() LivednsRecordArrayOutput {
	return i.ToLivednsRecordArrayOutputWithContext(context.Background())
}

func (i LivednsRecordArray) ToLivednsRecordArrayOutputWithContext(ctx context.Context) LivednsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LivednsRecordArrayOutput)
}

// LivednsRecordMapInput is an input type that accepts LivednsRecordMap and LivednsRecordMapOutput values.
// You can construct a concrete instance of `LivednsRecordMapInput` via:
//
//	LivednsRecordMap{ "key": LivednsRecordArgs{...} }
type LivednsRecordMapInput interface {
	pulumi.Input

	ToLivednsRecordMapOutput() LivednsRecordMapOutput
	ToLivednsRecordMapOutputWithContext(context.Context) LivednsRecordMapOutput
}

type LivednsRecordMap map[string]LivednsRecordInput

func (LivednsRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LivednsRecord)(nil)).Elem()
}

func (i LivednsRecordMap) ToLivednsRecordMapOutput() LivednsRecordMapOutput {
	return i.ToLivednsRecordMapOutputWithContext(context.Background())
}

func (i LivednsRecordMap) ToLivednsRecordMapOutputWithContext(ctx context.Context) LivednsRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LivednsRecordMapOutput)
}

type LivednsRecordOutput struct{ *pulumi.OutputState }

func (LivednsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LivednsRecord)(nil)).Elem()
}

func (o LivednsRecordOutput) ToLivednsRecordOutput() LivednsRecordOutput {
	return o
}

func (o LivednsRecordOutput) ToLivednsRecordOutputWithContext(ctx context.Context) LivednsRecordOutput {
	return o
}

// The href of the record
func (o LivednsRecordOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v *LivednsRecord) pulumi.StringOutput { return v.Href }).(pulumi.StringOutput)
}

// Define if the record can be modified outside Terraform (this currently only works for TXT records)
func (o LivednsRecordOutput) Mutable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LivednsRecord) pulumi.BoolPtrOutput { return v.Mutable }).(pulumi.BoolPtrOutput)
}

// The name of the record
func (o LivednsRecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LivednsRecord) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The TTL of the record
func (o LivednsRecordOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *LivednsRecord) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

// The type of the record
func (o LivednsRecordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *LivednsRecord) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// A list of values of the record
func (o LivednsRecordOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LivednsRecord) pulumi.StringArrayOutput { return v.Values }).(pulumi.StringArrayOutput)
}

// The FQDN of the domain
func (o LivednsRecordOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *LivednsRecord) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type LivednsRecordArrayOutput struct{ *pulumi.OutputState }

func (LivednsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LivednsRecord)(nil)).Elem()
}

func (o LivednsRecordArrayOutput) ToLivednsRecordArrayOutput() LivednsRecordArrayOutput {
	return o
}

func (o LivednsRecordArrayOutput) ToLivednsRecordArrayOutputWithContext(ctx context.Context) LivednsRecordArrayOutput {
	return o
}

func (o LivednsRecordArrayOutput) Index(i pulumi.IntInput) LivednsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LivednsRecord {
		return vs[0].([]*LivednsRecord)[vs[1].(int)]
	}).(LivednsRecordOutput)
}

type LivednsRecordMapOutput struct{ *pulumi.OutputState }

func (LivednsRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LivednsRecord)(nil)).Elem()
}

func (o LivednsRecordMapOutput) ToLivednsRecordMapOutput() LivednsRecordMapOutput {
	return o
}

func (o LivednsRecordMapOutput) ToLivednsRecordMapOutputWithContext(ctx context.Context) LivednsRecordMapOutput {
	return o
}

func (o LivednsRecordMapOutput) MapIndex(k pulumi.StringInput) LivednsRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LivednsRecord {
		return vs[0].(map[string]*LivednsRecord)[vs[1].(string)]
	}).(LivednsRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LivednsRecordInput)(nil)).Elem(), &LivednsRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*LivednsRecordArrayInput)(nil)).Elem(), LivednsRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LivednsRecordMapInput)(nil)).Elem(), LivednsRecordMap{})
	pulumi.RegisterOutputType(LivednsRecordOutput{})
	pulumi.RegisterOutputType(LivednsRecordArrayOutput{})
	pulumi.RegisterOutputType(LivednsRecordMapOutput{})
}
