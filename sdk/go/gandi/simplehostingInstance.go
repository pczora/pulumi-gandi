// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gandi

import (
	"context"
	"reflect"

	"errors"
	"github.com/pczora/pulumi-gandi/sdk/go/gandi/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: gandi.index/simplehostinginstance.SimplehostingInstance has been deprecated in favor of gandi.simplehosting/instance.Instance
type SimplehostingInstance struct {
	pulumi.CustomResourceState

	// The name of the database type ('mysql' or 'pgsql')
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// The name of the language ('php', 'python', 'nodejs' or 'ruby')
	LanguageName pulumi.StringOutput `pulumi:"languageName"`
	// The datacenter location of the instance ('FR' or 'LU')
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the SimpleHosting instance
	Name pulumi.StringOutput `pulumi:"name"`
	// The size of the SimpleHosting instance ('s+', 'm', 'l' or 'xxl')
	Size pulumi.StringOutput `pulumi:"size"`
}

// NewSimplehostingInstance registers a new resource with the given unique name, arguments, and options.
func NewSimplehostingInstance(ctx *pulumi.Context,
	name string, args *SimplehostingInstanceArgs, opts ...pulumi.ResourceOption) (*SimplehostingInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.LanguageName == nil {
		return nil, errors.New("invalid value for required argument 'LanguageName'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SimplehostingInstance
	err := ctx.RegisterResource("gandi:index/simplehostingInstance:SimplehostingInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSimplehostingInstance gets an existing SimplehostingInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSimplehostingInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SimplehostingInstanceState, opts ...pulumi.ResourceOption) (*SimplehostingInstance, error) {
	var resource SimplehostingInstance
	err := ctx.ReadResource("gandi:index/simplehostingInstance:SimplehostingInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SimplehostingInstance resources.
type simplehostingInstanceState struct {
	// The name of the database type ('mysql' or 'pgsql')
	DatabaseName *string `pulumi:"databaseName"`
	// The name of the language ('php', 'python', 'nodejs' or 'ruby')
	LanguageName *string `pulumi:"languageName"`
	// The datacenter location of the instance ('FR' or 'LU')
	Location *string `pulumi:"location"`
	// The name of the SimpleHosting instance
	Name *string `pulumi:"name"`
	// The size of the SimpleHosting instance ('s+', 'm', 'l' or 'xxl')
	Size *string `pulumi:"size"`
}

type SimplehostingInstanceState struct {
	// The name of the database type ('mysql' or 'pgsql')
	DatabaseName pulumi.StringPtrInput
	// The name of the language ('php', 'python', 'nodejs' or 'ruby')
	LanguageName pulumi.StringPtrInput
	// The datacenter location of the instance ('FR' or 'LU')
	Location pulumi.StringPtrInput
	// The name of the SimpleHosting instance
	Name pulumi.StringPtrInput
	// The size of the SimpleHosting instance ('s+', 'm', 'l' or 'xxl')
	Size pulumi.StringPtrInput
}

func (SimplehostingInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*simplehostingInstanceState)(nil)).Elem()
}

type simplehostingInstanceArgs struct {
	// The name of the database type ('mysql' or 'pgsql')
	DatabaseName string `pulumi:"databaseName"`
	// The name of the language ('php', 'python', 'nodejs' or 'ruby')
	LanguageName string `pulumi:"languageName"`
	// The datacenter location of the instance ('FR' or 'LU')
	Location string `pulumi:"location"`
	// The name of the SimpleHosting instance
	Name *string `pulumi:"name"`
	// The size of the SimpleHosting instance ('s+', 'm', 'l' or 'xxl')
	Size string `pulumi:"size"`
}

// The set of arguments for constructing a SimplehostingInstance resource.
type SimplehostingInstanceArgs struct {
	// The name of the database type ('mysql' or 'pgsql')
	DatabaseName pulumi.StringInput
	// The name of the language ('php', 'python', 'nodejs' or 'ruby')
	LanguageName pulumi.StringInput
	// The datacenter location of the instance ('FR' or 'LU')
	Location pulumi.StringInput
	// The name of the SimpleHosting instance
	Name pulumi.StringPtrInput
	// The size of the SimpleHosting instance ('s+', 'm', 'l' or 'xxl')
	Size pulumi.StringInput
}

func (SimplehostingInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*simplehostingInstanceArgs)(nil)).Elem()
}

type SimplehostingInstanceInput interface {
	pulumi.Input

	ToSimplehostingInstanceOutput() SimplehostingInstanceOutput
	ToSimplehostingInstanceOutputWithContext(ctx context.Context) SimplehostingInstanceOutput
}

func (*SimplehostingInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**SimplehostingInstance)(nil)).Elem()
}

func (i *SimplehostingInstance) ToSimplehostingInstanceOutput() SimplehostingInstanceOutput {
	return i.ToSimplehostingInstanceOutputWithContext(context.Background())
}

func (i *SimplehostingInstance) ToSimplehostingInstanceOutputWithContext(ctx context.Context) SimplehostingInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimplehostingInstanceOutput)
}

// SimplehostingInstanceArrayInput is an input type that accepts SimplehostingInstanceArray and SimplehostingInstanceArrayOutput values.
// You can construct a concrete instance of `SimplehostingInstanceArrayInput` via:
//
//	SimplehostingInstanceArray{ SimplehostingInstanceArgs{...} }
type SimplehostingInstanceArrayInput interface {
	pulumi.Input

	ToSimplehostingInstanceArrayOutput() SimplehostingInstanceArrayOutput
	ToSimplehostingInstanceArrayOutputWithContext(context.Context) SimplehostingInstanceArrayOutput
}

type SimplehostingInstanceArray []SimplehostingInstanceInput

func (SimplehostingInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SimplehostingInstance)(nil)).Elem()
}

func (i SimplehostingInstanceArray) ToSimplehostingInstanceArrayOutput() SimplehostingInstanceArrayOutput {
	return i.ToSimplehostingInstanceArrayOutputWithContext(context.Background())
}

func (i SimplehostingInstanceArray) ToSimplehostingInstanceArrayOutputWithContext(ctx context.Context) SimplehostingInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimplehostingInstanceArrayOutput)
}

// SimplehostingInstanceMapInput is an input type that accepts SimplehostingInstanceMap and SimplehostingInstanceMapOutput values.
// You can construct a concrete instance of `SimplehostingInstanceMapInput` via:
//
//	SimplehostingInstanceMap{ "key": SimplehostingInstanceArgs{...} }
type SimplehostingInstanceMapInput interface {
	pulumi.Input

	ToSimplehostingInstanceMapOutput() SimplehostingInstanceMapOutput
	ToSimplehostingInstanceMapOutputWithContext(context.Context) SimplehostingInstanceMapOutput
}

type SimplehostingInstanceMap map[string]SimplehostingInstanceInput

func (SimplehostingInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SimplehostingInstance)(nil)).Elem()
}

func (i SimplehostingInstanceMap) ToSimplehostingInstanceMapOutput() SimplehostingInstanceMapOutput {
	return i.ToSimplehostingInstanceMapOutputWithContext(context.Background())
}

func (i SimplehostingInstanceMap) ToSimplehostingInstanceMapOutputWithContext(ctx context.Context) SimplehostingInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimplehostingInstanceMapOutput)
}

type SimplehostingInstanceOutput struct{ *pulumi.OutputState }

func (SimplehostingInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SimplehostingInstance)(nil)).Elem()
}

func (o SimplehostingInstanceOutput) ToSimplehostingInstanceOutput() SimplehostingInstanceOutput {
	return o
}

func (o SimplehostingInstanceOutput) ToSimplehostingInstanceOutputWithContext(ctx context.Context) SimplehostingInstanceOutput {
	return o
}

// The name of the database type ('mysql' or 'pgsql')
func (o SimplehostingInstanceOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *SimplehostingInstance) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// The name of the language ('php', 'python', 'nodejs' or 'ruby')
func (o SimplehostingInstanceOutput) LanguageName() pulumi.StringOutput {
	return o.ApplyT(func(v *SimplehostingInstance) pulumi.StringOutput { return v.LanguageName }).(pulumi.StringOutput)
}

// The datacenter location of the instance ('FR' or 'LU')
func (o SimplehostingInstanceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SimplehostingInstance) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the SimpleHosting instance
func (o SimplehostingInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SimplehostingInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The size of the SimpleHosting instance ('s+', 'm', 'l' or 'xxl')
func (o SimplehostingInstanceOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v *SimplehostingInstance) pulumi.StringOutput { return v.Size }).(pulumi.StringOutput)
}

type SimplehostingInstanceArrayOutput struct{ *pulumi.OutputState }

func (SimplehostingInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SimplehostingInstance)(nil)).Elem()
}

func (o SimplehostingInstanceArrayOutput) ToSimplehostingInstanceArrayOutput() SimplehostingInstanceArrayOutput {
	return o
}

func (o SimplehostingInstanceArrayOutput) ToSimplehostingInstanceArrayOutputWithContext(ctx context.Context) SimplehostingInstanceArrayOutput {
	return o
}

func (o SimplehostingInstanceArrayOutput) Index(i pulumi.IntInput) SimplehostingInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SimplehostingInstance {
		return vs[0].([]*SimplehostingInstance)[vs[1].(int)]
	}).(SimplehostingInstanceOutput)
}

type SimplehostingInstanceMapOutput struct{ *pulumi.OutputState }

func (SimplehostingInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SimplehostingInstance)(nil)).Elem()
}

func (o SimplehostingInstanceMapOutput) ToSimplehostingInstanceMapOutput() SimplehostingInstanceMapOutput {
	return o
}

func (o SimplehostingInstanceMapOutput) ToSimplehostingInstanceMapOutputWithContext(ctx context.Context) SimplehostingInstanceMapOutput {
	return o
}

func (o SimplehostingInstanceMapOutput) MapIndex(k pulumi.StringInput) SimplehostingInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SimplehostingInstance {
		return vs[0].(map[string]*SimplehostingInstance)[vs[1].(string)]
	}).(SimplehostingInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SimplehostingInstanceInput)(nil)).Elem(), &SimplehostingInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimplehostingInstanceArrayInput)(nil)).Elem(), SimplehostingInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimplehostingInstanceMapInput)(nil)).Elem(), SimplehostingInstanceMap{})
	pulumi.RegisterOutputType(SimplehostingInstanceOutput{})
	pulumi.RegisterOutputType(SimplehostingInstanceArrayOutput{})
	pulumi.RegisterOutputType(SimplehostingInstanceMapOutput{})
}
