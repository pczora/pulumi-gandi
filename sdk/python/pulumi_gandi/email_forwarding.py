# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['EmailForwardingArgs', 'EmailForwarding']

@pulumi.input_type
class EmailForwardingArgs:
    def __init__(__self__, *,
                 destinations: pulumi.Input[Sequence[pulumi.Input[str]]],
                 source: pulumi.Input[str]):
        """
        The set of arguments for constructing a EmailForwarding resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] destinations: Forwards to email addresses
        :param pulumi.Input[str] source: Account alias name
        """
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def destinations(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Forwards to email addresses
        """
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        Account alias name
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class _EmailForwardingState:
    def __init__(__self__, *,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EmailForwarding resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] destinations: Forwards to email addresses
        :param pulumi.Input[str] source: Account alias name
        """
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Forwards to email addresses
        """
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Account alias name
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)


warnings.warn("""gandi.index/emailforwarding.EmailForwarding has been deprecated in favor of gandi.email/forwarding.Forwarding""", DeprecationWarning)


class EmailForwarding(pulumi.CustomResource):
    warnings.warn("""gandi.index/emailforwarding.EmailForwarding has been deprecated in favor of gandi.email/forwarding.Forwarding""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a EmailForwarding resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] destinations: Forwards to email addresses
        :param pulumi.Input[str] source: Account alias name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EmailForwardingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EmailForwarding resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EmailForwardingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EmailForwardingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        pulumi.log.warn("""EmailForwarding is deprecated: gandi.index/emailforwarding.EmailForwarding has been deprecated in favor of gandi.email/forwarding.Forwarding""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EmailForwardingArgs.__new__(EmailForwardingArgs)

            if destinations is None and not opts.urn:
                raise TypeError("Missing required property 'destinations'")
            __props__.__dict__["destinations"] = destinations
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
        super(EmailForwarding, __self__).__init__(
            'gandi:index/emailForwarding:EmailForwarding',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            destinations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            source: Optional[pulumi.Input[str]] = None) -> 'EmailForwarding':
        """
        Get an existing EmailForwarding resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] destinations: Forwards to email addresses
        :param pulumi.Input[str] source: Account alias name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EmailForwardingState.__new__(_EmailForwardingState)

        __props__.__dict__["destinations"] = destinations
        __props__.__dict__["source"] = source
        return EmailForwarding(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def destinations(self) -> pulumi.Output[Sequence[str]]:
        """
        Forwards to email addresses
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[str]:
        """
        Account alias name
        """
        return pulumi.get(self, "source")

